package com.berel.color.utils;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Shader;
import android.os.Build;
import android.util.AttributeSet;
import android.util.Log;
import android.util.Pair;
import android.util.TypedValue;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import androidx.annotation.RequiresApi;
import androidx.core.content.ContextCompat;

import com.berel.color.R;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class CustomDrawView extends View {
    //drawing path
    private Path drawPath;
    //drawing and canvas paint
    private Paint drawPaint, canvasPaint;
    //initial color
    private int paintColor = 0x00FFFFFF, paintAlpha = 255;
    //canvas
    private Canvas drawCanvas;
    //canvas bitmap
    private Bitmap canvasBitmap;
    //brush sizes
    private float brushSize, lastBrushSize;
    //erase flag
    private boolean erase=false;

    private GetCoordinateCallback callbackForCoordinate;

    private boolean started = false;

    private ArrayList<Paint> paintPenList =new ArrayList<>();
    private Path latestPath;
    private Paint latestPaint;
    private ArrayList<Path> pathPenList =new ArrayList<>();

    //TODO PRUEBA DE CONCEPTO
    private ArrayList<Stack> listHistory = new ArrayList<>();
    private ArrayList<String> listHistoryColors = new ArrayList<>();
    private Stack<Pair<Float, Float>> stackHistory = new Stack<>();
    private int pivot = 0;
    private int numPasosDeshacer = 0;
    private ImageView btnRelativeDeshacer;
    private ImageView btnRelativeRehacer;
    private String colorSelected = "";
    private boolean btnDeshacerActivated = false;
    private boolean btnRehacerActivated = false;
    private ArrayList<Path> listHistoryPaths = new ArrayList<>();

    public CustomDrawView(Context context, AttributeSet attrs){
        super(context, attrs);
        setupDrawing();
    }

    //setup drawing
    private void setupDrawing(){

        //prepare for drawing and setup paint stroke properties
        //brushSize = getResources().getInteger(R.integer.medium_size);
        brushSize = 15;
        lastBrushSize = brushSize;
        drawPath = new Path();
        drawPaint = new Paint();
        drawPaint.setColor(paintColor);
        drawPaint.setAntiAlias(true);
        drawPaint.setStrokeWidth(brushSize);
        drawPaint.setStyle(Paint.Style.STROKE);
        drawPaint.setStrokeJoin(Paint.Join.ROUND);
        drawPaint.setStrokeCap(Paint.Cap.ROUND);
        canvasPaint = new Paint(Paint.DITHER_FLAG);
    }


    public void setThisCallback(GetCoordinateCallback callback) {
        this.callbackForCoordinate=callback;
    }

    //size assigned to view
    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        //canvasBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
        drawCanvas = new Canvas(canvasBitmap);
    }

    //draw the view - will be called after touch event
    @Override
    protected void onDraw(Canvas canvas) {
        canvas.drawBitmap(canvasBitmap, 0, 0, canvasPaint);
        canvas.drawPath(drawPath, drawPaint);
    }

    //TODO PRUEBA DE CONCEPTO
    @RequiresApi(api = Build.VERSION_CODES.N)
    public void rehacer(){
        if(btnRehacerActivated){
            Log.d("tagpasos", "Re pre: " + numPasosDeshacer);
            if(numPasosDeshacer > 0){
                Path path = listHistoryPaths.get(listHistoryPaths.size() - numPasosDeshacer);
                //seleccionamos el color de la lista
                setColor(listHistoryColors.get(listHistoryColors.size() - numPasosDeshacer));
                paintCanvas(path);
                numPasosDeshacer--;
                //validar si dehabilitamos btn
                if(numPasosDeshacer <= 0) this.btnRelativeRehacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_rehacer_deshabilitado));
            }
            this.btnRelativeDeshacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_deshacer_habilitado));
            Log.d("tagpasos", "Re post: " + numPasosDeshacer);
        }
    }

    //TODO PRUEBA DE CONCEPTO
    @RequiresApi(api = Build.VERSION_CODES.N)
    public void rehacerOld(){
        if(btnRehacerActivated){
            Log.d("tagpasos", "Re pre: " + numPasosDeshacer);
            if(numPasosDeshacer > 0){
                Stack<Pair<Float, Float>> canvas = listHistory.get(listHistory.size() - numPasosDeshacer);
                //seleccionamos el color de la lista
                setColor(listHistoryColors.get(listHistoryColors.size() - numPasosDeshacer));
                //paintCanvas(canvas);
                numPasosDeshacer--;
                //validar si dehabilitamos btn
                if(numPasosDeshacer <= 0) this.btnRelativeRehacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_rehacer_deshabilitado));
            }
            this.btnRelativeDeshacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_deshacer_habilitado));
            Log.d("tagpasos", "Re post: " + numPasosDeshacer);
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    public void deshacer(){
        if(btnDeshacerActivated){
            resetCanvas();
            Log.d("tagpasos", "Des pre: " + numPasosDeshacer);
            Log.d("tagstack", "Size DESHACER: " + listHistoryPaths.size());
            //if((listHistory.size() - numPasosDeshacer) > 0){
            if((listHistoryPaths.size() - numPasosDeshacer) > 0){
                numPasosDeshacer++;//variable que cuenta el numero de veces que apretamos deshacer

                /**
                 * Si la lista es de 2 elementos: validamos los pasos que llevamos
                 */
                if(listHistoryPaths.size() == 2){
                    if(numPasosDeshacer == 1){// si llevamos 1 paso pintamos el primer elemento unicamente
                        pivot = listHistoryPaths.size() -1;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            paintCanvas(listHistoryPaths.get(i));
                        }
                    }else if(numPasosDeshacer == 2){ // si llevamos 2 pasos, es mejor eliminar todo el dibujo
                        resetCanvas();
                        //num pasos Deshacer mantenerlo en 2
                        numPasosDeshacer = 2;
                    }
                }else if(listHistoryPaths.size() == 3){
                    /**
                     * Si la lista es de 3 elementos: validamos los pasos que llevamos
                     */
                    if(numPasosDeshacer == 1){// si llevamos 1 paso pintamos el 0 y 1 elemento
                        pivot = listHistoryPaths.size() -1;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            paintCanvas(listHistoryPaths.get(i));
                        }
                    }else if(numPasosDeshacer == 2){// si llevamos 2 pasos pintamos el 0 elemento
                        pivot = listHistoryPaths.size() -2;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            paintCanvas(listHistoryPaths.get(i));
                        }
                    }else if(numPasosDeshacer == 3){// si llevamos 3 pasos no pintamos nada
                        //num pasos Deshacer mantenerlo en 3
                        numPasosDeshacer = 3;
                    }
                }else if(listHistoryPaths.size() > 3){
                    /**
                     * Si la lista es de mas de 3 elementos: validamos los pasos que llevamos
                     */
                    if(numPasosDeshacer == 1){// si llevamos 1 paso pintamos del 0 a size -1 elemento
                        pivot = listHistoryPaths.size() -1;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            paintCanvas(listHistoryPaths.get(i));
                        }
                    }else if(numPasosDeshacer == 2){// si llevamos 2 pasos pintamos del 0 a size -2 elemento
                        pivot = listHistoryPaths.size() -2;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            paintCanvas(listHistoryPaths.get(i));
                        }
                    }else if(numPasosDeshacer == 3){// si llevamos 3 paso pintamos del 0 a size -3 elemento
                        pivot = listHistoryPaths.size() -3;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            paintCanvas(listHistoryPaths.get(i));
                        }
                    }else{//pintamos del 0 al size-3 elemento
                        pivot = listHistoryPaths.size() -3;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            paintCanvas(listHistoryPaths.get(i));
                        }
                        //num pasos Deshacer mantenerlo en 3
                        numPasosDeshacer = 3;
                    }
                }
            }

            //si el size de la lista es igual a  numPasosDeshacer bloqueamos btnDeshacer drawable
            if(listHistoryPaths.size() == numPasosDeshacer || numPasosDeshacer >= 3)
                this.btnRelativeDeshacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_deshacer_deshabilitado));

            Log.d("tagpasos", "Des post: " + numPasosDeshacer);
            this.btnRelativeRehacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_rehacer_habilitado));
            btnRehacerActivated = true;
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    public void deshacerOld(){
        if(btnDeshacerActivated){
            //resetCanvas();
            Log.d("tagpasos", "Des pre: " + numPasosDeshacer);
            Log.d("tagstack", "Size DESHACER: " + listHistory.size());
            //if((listHistory.size() - numPasosDeshacer) > 0){
            if((listHistory.size() - numPasosDeshacer) > 0){
                numPasosDeshacer++;//variable que cuenta el numero de veces que apretamos deshacer

                /**
                 * Si la lista es de 2 elementos: validamos los pasos que llevamos
                 */
                if(listHistory.size() == 2){
                    if(numPasosDeshacer == 1){// si llevamos 1 paso pintamos el primer elemento unicamente
                        pivot = listHistory.size() -1;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            //paintCanvas(listHistory.get(i));
                        }
                    }else if(numPasosDeshacer == 2){ // si llevamos 2 pasos, es mejor eliminar todo el dibujo
                        resetCanvas();
                        //num pasos Deshacer mantenerlo en 2
                        numPasosDeshacer = 2;
                    }
                }else if(listHistory.size() == 3){
                    /**
                     * Si la lista es de 3 elementos: validamos los pasos que llevamos
                     */
                    if(numPasosDeshacer == 1){// si llevamos 1 paso pintamos el 0 y 1 elemento
                        pivot = listHistory.size() -1;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            //paintCanvas(listHistory.get(i));
                        }
                    }else if(numPasosDeshacer == 2){// si llevamos 2 pasos pintamos el 0 elemento
                        pivot = listHistory.size() -2;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            //paintCanvas(listHistory.get(i));
                        }
                    }else if(numPasosDeshacer == 3){// si llevamos 3 pasos no pintamos nada
                        //num pasos Deshacer mantenerlo en 3
                        numPasosDeshacer = 3;
                    }
                }else if(listHistory.size() > 3){
                    /**
                     * Si la lista es de mas de 3 elementos: validamos los pasos que llevamos
                     */
                    if(numPasosDeshacer == 1){// si llevamos 1 paso pintamos del 0 a size -1 elemento
                        pivot = listHistory.size() -1;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            //paintCanvas(listHistory.get(i));
                        }
                    }else if(numPasosDeshacer == 2){// si llevamos 2 pasos pintamos del 0 a size -2 elemento
                        pivot = listHistory.size() -2;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            //paintCanvas(listHistory.get(i));
                        }
                    }else if(numPasosDeshacer == 3){// si llevamos 3 paso pintamos del 0 a size -3 elemento
                        pivot = listHistory.size() -3;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            //paintCanvas(listHistory.get(i));
                        }
                    }else{//pintamos del 0 al size-3 elemento
                        pivot = listHistory.size() -3;
                        for(int i = 0; i < pivot; i++){
                            setColor(listHistoryColors.get(i));
                            //paintCanvas(listHistory.get(i));
                        }
                        //num pasos Deshacer mantenerlo en 3
                        numPasosDeshacer = 3;
                    }
                }
            }

            //si el size de la lista es igual a  numPasosDeshacer bloqueamos btnDeshacer drawable
            if(listHistory.size() == numPasosDeshacer || numPasosDeshacer >= 3)
                this.btnRelativeDeshacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_deshacer_deshabilitado));

            Log.d("tagpasos", "Des post: " + numPasosDeshacer);
            this.btnRelativeRehacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_rehacer_habilitado));
            btnRehacerActivated = true;
        }
    }

    public void clearLists(){
        pivot = 0;
        numPasosDeshacer = 0;
        listHistory.clear();
        listHistoryColors.clear();
        btnRehacerActivated = false;
        btnDeshacerActivated = false;
        if(this.btnRelativeDeshacer != null && this.btnRelativeRehacer != null){
            this.btnRelativeRehacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_rehacer_deshabilitado));
            this.btnRelativeDeshacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_deshacer_deshabilitado));
        }
    }

    private void resetCanvas(){
        drawPath.reset();
        if(drawCanvas != null)
            drawCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
        invalidate();
    }

    private void paintCanvas(Path path){
        //listHistoryPaths.remove(listHistoryPaths.size() -1);
        drawCanvas.drawPath(path, drawPaint);
        invalidate();
        //Pair<Float, Float> pairFirst = canvas.get(0);
        /*
        drawPath.moveTo(pairFirst.first, pairFirst.second);
        drawPath.lineTo(pairFirst.first, pairFirst.second);
        drawCanvas.drawPath(drawPath, drawPaint);

        for (int i = 0; i < canvas.size(); i++){
            Pair<Float, Float> pair = canvas.get(i);
            drawPath.lineTo(pair.first, pair.second);
            Log.d("tagfor", "" + i);;
            drawCanvas.drawPath(drawPath, drawPaint);
        }
        drawPath.reset();*/

        //invalidate();
    }

    //register user touches as drawing action
    @RequiresApi(api = Build.VERSION_CODES.N)
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        started = true;
        float touchX = event.getX();
        float touchY = event.getY();
        //respond to down, move and up events
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                if(colorSelected != "#00FFFFFF")
                    //saveStateCanvas(touchX, touchY, false);
                drawPath.moveTo(touchX, touchY);
                break;
            case MotionEvent.ACTION_MOVE:
                //TODO PRUEBA DE CONCEPTO
                if(colorSelected != "#00FFFFFF")
                    //saveStateCanvas(touchX, touchY, false);
                drawPath.lineTo(touchX, touchY);
                break;
            case MotionEvent.ACTION_UP:
                /**
                 * Agegamos estado del dibujo a la lista y activamos boton deshacer.
                 */


                drawPath.lineTo(touchX, touchY);
                drawCanvas.drawPath(drawPath, drawPaint);

                if(colorSelected != "#00FFFFFF"){
                    saveStateCanvas(drawPath, true);
                    btnRelativeDeshacer.setImageDrawable(getContext().getDrawable(R.drawable.editor_color_deshacer_habilitado));
                    btnDeshacerActivated = true;
                }
                drawPath.reset();

                break;
            default:
                return false;
        }
        //redraw
        invalidate();
        return true;

    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    private void saveStateCanvas(Path path, boolean isUP){
        //Pair<Float, Float> coord = new Pair<>(x, y);
        //stackHistory.add(coord);

        /**
         * Si levantamos el dedo se considera accion terminada y guardamos el dibujo
         */
        if(isUP){
            //TODO Si deshice un dibujo o varios (numPasosDeshacer > 0)... y pinto uno nuevo.... elimino de la lista todos los dibujos que no estan pintados.
            // numPasosDeshacer vuelve a 0 y rehacer de deshabilita
            if(numPasosDeshacer > 0){
                Log.d("tagstack", "Hubo deshacer antes de agregar este");
                Log.d("tagstack", "Pasos deshacer:" + numPasosDeshacer);
                Log.d("tagstack", "Size pRE: " + listHistory.size());
                if(numPasosDeshacer == 1){
                    //listHistory.remove(listHistory.size() -1);
                    listHistoryPaths.remove(listHistoryPaths.size() -1);
                    listHistoryColors.remove(listHistoryColors.size() - 1);
                    Log.d("tagstack", "E1");
                }else if(numPasosDeshacer == 2){
                    //listHistory.remove(listHistory.size() - 1);
                    //listHistory.remove(listHistory.size() - 1);
                    listHistoryPaths.remove(listHistoryPaths.size() - 1);
                    listHistoryPaths.remove(listHistoryPaths.size() - 1);
                    listHistoryColors.remove(listHistoryColors.size() - 1);
                    listHistoryColors.remove(listHistoryColors.size() - 1);
                    Log.d("tagstack", "E2");
                }else if(numPasosDeshacer == 3){
                    //listHistory.remove(listHistory.size() - 1);
                    //listHistory.remove(listHistory.size() - 1);
                    //listHistory.remove(listHistory.size() - 1);
                    listHistoryPaths.remove(listHistoryPaths.size() - 1);
                    listHistoryPaths.remove(listHistoryPaths.size() - 1);
                    listHistoryPaths.remove(listHistoryPaths.size() - 1);
                    listHistoryColors.remove(listHistoryColors.size() - 1);
                    listHistoryColors.remove(listHistoryColors.size() - 1);
                    listHistoryColors.remove(listHistoryColors.size() - 1);
                    Log.d("tagstack", "E3");
                }
                Log.d("tagstack", "Size: " + listHistory.size());
                numPasosDeshacer = 0;

                //reemplazo en el momento en el que pivote sea mayor a 0 (que estemos en un estado pasado)
               // Stack<Pair<Float, Float>> stackHistoryCopy = new Stack<>();
                /*
                stackHistory.forEach(floatFloatPair -> {//hacemos copia para poder vaciar el anterior stack hisory
                    stackHistoryCopy.add(floatFloatPair);
                });*/
                //listHistory.add(stackHistoryCopy);
                listHistoryPaths.add(path);
                drawPath = new Path();
                //stackHistory.clear();
                Log.d("tagstack", "Stack guardado");
                Log.d("tagstack", "Pos pivot: " + pivot);
            }else{
                //reemplazo en el momento en el que pivote sea mayor a 0 (que estemos en un estado pasado)
                //Stack<Pair<Float, Float>> stackHistoryCopy = new Stack<>();
                /*stackHistory.forEach(floatFloatPair -> {//hacemos copia para poder vaciar el anterior stack hisory
                    stackHistoryCopy.add(floatFloatPair);
                });*/
                //listHistory.add(stackHistoryCopy);
                listHistoryPaths.add(path);
                drawPath = new Path();
                //stackHistory.clear();
                Log.d("tagstack", "Stack guardado");
                Log.d("tagstack", "Pos pivot: " + pivot);
            }

            //guardamos color
            listHistoryColors.add(colorSelected);
        }
        Log.d("tagpath", "Num " + listHistoryPaths.size());
    }

    public boolean isActive(){
        return started;
    }
    //update color
    public void setColor(String newColor){
        colorSelected = newColor;
        invalidate();
        //check whether color value or pattern name
        if(newColor.startsWith("#")){
            paintColor = Color.parseColor(newColor);
            drawPaint.setColor(paintColor);
            drawPaint.setShader(null);
        }
        else{
            //pattern
            int patternID = getResources().getIdentifier(
                    newColor, "drawable", "com.color.berel");
            //decode
            Bitmap patternBMP = BitmapFactory.decodeResource(getResources(), patternID);
            //create shader
            BitmapShader patternBMPshader = new BitmapShader(patternBMP,
                    Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
            //color and shader
            drawPaint.setColor(0xFFFFFFFF);
            drawPaint.setShader(patternBMPshader);
        }
    }

    //set brush size
    public void setBrushSize(float newSize){
        float pixelAmount = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
                newSize, getResources().getDisplayMetrics());
        brushSize=pixelAmount;
        drawPaint.setStrokeWidth(brushSize);
    }

    //get and set last brush size
    public void setLastBrushSize(float lastSize){
        lastBrushSize=lastSize;
    }
    public float getLastBrushSize(){
        return lastBrushSize;
    }

    //set erase true or false
    public void setErase(boolean isErase){
        erase=isErase;
        started=false;
        if(erase) drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
        else drawPaint.setXfermode(null);
    }

    //start new drawing
    public void startNew(ImageView btnRelativeDeshacer, ImageView btnRelativeRehacer){
        this.btnRelativeDeshacer = btnRelativeDeshacer;
        this.btnRelativeRehacer = btnRelativeRehacer;
        if(drawCanvas != null){
        Log.e("tagstack","CANVAS: "+drawCanvas);
            drawCanvas = new Canvas(canvasBitmap);
        //drawCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
        }

        invalidate();
    }

    //return current alpha
    public int getPaintAlpha(){
        return Math.round((float)paintAlpha/255*100);
    }

    //set alpha
    public void setPaintAlpha(int newAlpha){
        paintAlpha=Math.round((float)newAlpha/100*255);
        drawPaint.setColor(paintColor);
        drawPaint.setAlpha(paintAlpha);
    }

    public void undoPath() {

        if(paintPenList.size()>1) {
            latestPaint = paintPenList.get(paintPenList.size() - 2);
            latestPath = pathPenList.get(pathPenList.size() - 2);

            paintPenList.remove(paintPenList.size() - 1);
            pathPenList.remove(pathPenList.size() - 1);

            paintColor=latestPaint.getColor();
            lastBrushSize= (int) latestPaint.getStrokeWidth();
        }else{
            setErase(true);
        }

        invalidate();
    }

    public interface GetCoordinateCallback {
        void moving(float x, float y);
        void start(float x, float y);
        void end(float x, float y);
    }

    public void changeBackground(Bitmap image){
        canvasBitmap = image;
        invalidate();
    }

    /*
    private static final int STATE_STILL=0;
    private static final int STATE_MOVING=1;
    private static int DEFAULT_COLOR;

    private int state=0;
    private ArrayList<Paint> paintPenList =new ArrayList<>();
    private Path latestPath;
    private Paint latestPaint;
    private ArrayList<Path> pathPenList =new ArrayList<>();
    private GetCoordinateCallback callbackForCoordinate;
    private int lineWidth =15;
    private int currentColor;


    public CustomDrawView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    private void init() {

        DEFAULT_COLOR= ContextCompat.getColor(getContext(), R.color.black);
        currentColor=DEFAULT_COLOR;

        initPaintNPen(currentColor);

    }

    private void initPaintNPen(int color){

        latestPaint=getNewPaintPen(color);
        latestPath=getNewPathPen();

        paintPenList.add(latestPaint);
        pathPenList.add(latestPath);

    }

    private Path getNewPathPen() {
        Path path=new Path();
        return path;
    }

    private Paint getNewPaintPen(int color){

        Paint mPaintPen =new Paint();

        mPaintPen.setStrokeWidth(lineWidth);
        mPaintPen.setAntiAlias(true);
        mPaintPen.setDither(true);
        mPaintPen.setStyle(Paint.Style.STROKE);
        mPaintPen.setStrokeJoin(Paint.Join.MITER);
        mPaintPen.setStrokeCap(Paint.Cap.ROUND);
        mPaintPen.setColor(color);

        return mPaintPen;

    }

    public void setThisCallback(GetCoordinateCallback callback) {
        this.callbackForCoordinate=callback;
    }

    @Override
    public boolean onTouchEvent( MotionEvent event) {
        float x=event.getX();
        float y=event.getY();
        Log.e("CO-ordinate",event.getX()+" : "+event.getY());

        if(event.getAction() == MotionEvent.ACTION_DOWN){
            callbackForCoordinate.start(x,y);
            startPath(x,y);
        }else if(event.getAction() == MotionEvent.ACTION_MOVE){
            callbackForCoordinate.moving(x,y);
            updatePath(x,y);
        }else if(event.getAction()== MotionEvent.ACTION_UP){
            callbackForCoordinate.end(x,y);
            endPath(x,y);
        }
        invalidate();
        return true;
    }

    private void startPath(float x, float y) {
        //if(state==STATE_MOVING)
        //    mPath.lineTo(x,y);
        //else
        //    mPath.moveTo(x,y);
        initPaintNPen(currentColor);
        latestPath.moveTo(x,y);
    }

    private void updatePath(float x, float y) {
        state=STATE_MOVING;

        latestPath.lineTo(x,y);
    }

    private void endPath(float x, float y) {

    }

    public void setDrawColor(int color) {

        currentColor=color;

    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        for(int i=0;i<paintPenList.size();i++){
            canvas.drawPath(pathPenList.get(i),paintPenList.get(i));
        }
    }

    public void increaseWidth(boolean decrease){

        if(decrease){
            if(lineWidth >5) {
                lineWidth = lineWidth - 10;
            }
        }else{
            if(lineWidth <50) {
                lineWidth = lineWidth + 10;
            }
        }

        invalidate();
    }

    public void resetView() {
        currentColor=DEFAULT_COLOR;
        state=STATE_STILL;

        latestPath.reset();
        latestPaint.reset();

        pathPenList.clear();
        paintPenList.clear();
        lineWidth = 20;

        initPaintNPen(currentColor);

        invalidate();
    }


    public void undoPath() {

        if(paintPenList.size()>1) {
            latestPaint = paintPenList.get(paintPenList.size() - 2);
            latestPath = pathPenList.get(pathPenList.size() - 2);

            paintPenList.remove(paintPenList.size() - 1);
            pathPenList.remove(pathPenList.size() - 1);

            currentColor=latestPaint.getColor();
            lineWidth= (int) latestPaint.getStrokeWidth();
        }else{
            resetView();
        }

        invalidate();
    }

    public interface GetCoordinateCallback {
        void moving(float x, float y);
        void start(float x, float y);
        void end(float x, float y);
    }*/

}